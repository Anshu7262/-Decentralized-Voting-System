// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title Decentralized Voting System
 * @dev A smart contract for conducting transparent and secure elections
 */
contract Project {
    
    // Structure to represent a candidate
    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
        bool exists;
    }
    
    // Structure to represent a voter
    struct Voter {
        bool isRegistered;
        bool hasVoted;
        uint256 votedCandidateId;
    }
    
    // State variables
    address public owner;
    string public electionName;
    bool public votingActive;
    uint256 public totalVotes;
    uint256 public candidateCount;
    
    // Mappings
    mapping(uint256 => Candidate) public candidates;
    mapping(address => Voter) public voters;
    
    // Events
    event CandidateAdded(uint256 indexed candidateId, string name);
    event VoterRegistered(address indexed voter);
    event VoteCast(address indexed voter, uint256 indexed candidateId);
    event VotingStatusChanged(bool status);
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }
    
    modifier votingIsActive() {
        require(votingActive, "Voting is not currently active");
        _;
    }
    
    modifier votingIsInactive() {
        require(!votingActive, "Voting is currently active");
        _;
    }
    
    /**
     * @dev Constructor to initialize the voting system
     * @param _electionName Name of the election
     */
    constructor(string memory _electionName) {
        owner = msg.sender;
        electionName = _electionName;
        votingActive = false;
        totalVotes = 0;
        candidateCount = 0;
    }
    
    /**
     * @dev Core Function 1: Add a candidate to the election
     * @param _name Name of the candidate
     */
    function addCandidate(string memory _name) public onlyOwner votingIsInactive {
        require(bytes(_name).length > 0, "Candidate name cannot be empty");
        
        candidateCount++;
        candidates[candidateCount] = Candidate(candidateCount, _name, 0, true);
        
        emit CandidateAdded(candidateCount, _name);
    }
    
    /**
     * @dev Core Function 2: Cast a vote for a candidate
     * @param _candidateId ID of the candidate to vote for
     */
    function vote(uint256 _candidateId) public votingIsActive {
        require(voters[msg.sender].isRegistered, "You are not registered to vote");
        require(!voters[msg.sender].hasVoted, "You have already voted");
        require(candidates[_candidateId].exists, "Invalid candidate ID");
        
        // Record the vote
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedCandidateId = _candidateId;
        
        // Update candidate vote count
        candidates[_candidateId].voteCount++;
        totalVotes++;
        
        emit VoteCast(msg.sender, _candidateId);
    }
    
    /**
     * @dev Core Function 3: Register a voter
     */
    function registerVoter() public votingIsInactive {
        require(!voters[msg.sender].isRegistered, "You are already registered");
        
        voters[msg.sender] = Voter(true, false, 0);
        
        emit VoterRegistered(msg.sender);
    }
    
    /**
     * @dev Start the voting process
     */
    function startVoting() public onlyOwner votingIsInactive {
        require(candidateCount > 0, "No candidates added yet");
        votingActive = true;
        emit VotingStatusChanged(true);
    }
    
    /**
     * @dev End the voting process
     */
    function endVoting() public onlyOwner votingIsActive {
        votingActive = false;
        emit VotingStatusChanged(false);
    }
    
    /**
     * @dev Get candidate details
     * @param _candidateId ID of the candidate
     * @return id, name, voteCount
     */
    function getCandidate(uint256 _candidateId) public view returns (uint256, string memory, uint256) {
        require(candidates[_candidateId].exists, "Candidate does not exist");
        Candidate memory candidate = candidates[_candidateId];
        return (candidate.id, candidate.name, candidate.voteCount);
    }
    
    /**
     * @dev Get the winning candidate (can only be called after voting ends)
     * @return winningCandidateId, winningCandidateName, winningVoteCount
     */
    function getWinner() public view returns (uint256, string memory, uint256) {
        require(!votingActive, "Voting is still active");
        require(totalVotes > 0, "No votes have been cast");
        
        uint256 winningVoteCount = 0;
        uint256 winningCandidateId = 0;
        
        for (uint256 i = 1; i <= candidateCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winningCandidateId = i;
            }
        }
        
        return (winningCandidateId, candidates[winningCandidateId].name, winningVoteCount);
    }
    
    /**
     * @dev Get voter information
     * @param _voter Address of the voter
     * @return isRegistered, hasVoted, votedCandidateId
     */
    function getVoterInfo(address _voter) public view returns (bool, bool, uint256) {
        Voter memory voter = voters[_voter];
        return (voter.isRegistered, voter.hasVoted, voter.votedCandidateId);
    }
    
    /**
     * @dev Get election statistics
     * @return totalVotes, candidateCount, votingActive
     */
    function getElectionStats() public view returns (uint256, uint256, bool) {
        return (totalVotes, candidateCount, votingActive);
    }
}
